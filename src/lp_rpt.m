%**************************************************************************
% lp_rpt.m
% function [     ...
% out_ok,        ...
% out_bases,     ...
% out_total      ...
% ] = lp_rpt(    ...
%     in_costos, ...
%     in_pesos,  ...
%     in_mt,     ...
%     in_pj,     ...
%     in_r1,     ...
%     in_r2,     ...
%     in_a,      ...    
%     in_entero  ...
%     )
%**************************************************************************

function [     ...
out_ok,        ...
out_bases,     ...
out_total      ...
] = lp_rpt(    ...
    in_costos, ...
    in_pesos,  ...
    in_mt,     ...
    in_pj,     ...
    in_r1,     ...
    in_r2,     ...
    in_a,      ...    
    in_entero  ...
    )
% Constantes --------------------------------------------------------------
db = size(in_costos, 1);    % numero de bases
dd = size(in_costos, 2);    % numero de puntos de demanda
c1 = in_costos <= in_r1;    % cobertura en r1
c2 = in_costos <= in_r2;    % cobertura en r2    
a  = in_a .* sum(in_pesos); % porcentaje alfa de la demanda
p  = size(in_mt, 2);        % numero de amulancias

% Funcion objetivo: maximizar demanda cubierta 2 veces con penalizacion ---
f = [
	  in_mt(:).', ... % yjl             
    zeros(1, dd), ... % x1i (no importa)
	   -in_pesos  ... % x2i             
];

% Restricciones (desigualdades) -------------------------------------------
%   yjl                  x1i            x2i
A = [
	  repmat(-c2.', 1, p), zeros(dd, dd), zeros(dd, dd); % <= -1
        zeros( 1, db * p),     -in_pesos, zeros( 1, dd); % <= -a
      repmat(-c1.', 1, p),   eye(dd, dd),   eye(dd, dd); % <=  0
        zeros(dd, db * p),  -eye(dd, dd),   eye(dd, dd); % <=  0
    repmat(eye(db), 1, p), zeros(db, dd), zeros(db, dd); % <=  pj
];

b = [
	-1 * ones(dd, 1); % <= -1
                  -a; % <= -a
        zeros(dd, 1); % <=  0
        zeros(dd, 1); % <=  0
            in_pj(:); % <= pj
];

% Restricciones (igualdades) ----------------------------------------------
%      yjl            x1i           x2i
Aeq = [repelem(eye(p), 1, db), zeros(p, dd), zeros(p, dd)]; % = 1
beq =  ones(p, 1); % = 1

% Cotas -------------------------------------------------------------------
%     yjl           x1i           x2i
lb = [zeros(1, db * p), zeros(1, dd), zeros(1, dd)];
ub = [ ones(1, db * p),  ones(1, dd),  ones(1, dd)];

% Aplicar LP --------------------------------------------------------------
if (in_entero) % ILP
    [
    p_grupo,   ...
    out_total, ...
    p_exit     ...
	] = intlinprog(f, 1:numel(f), A, b, Aeq, beq, lb, ub);
else          % LP
	[
	p_grupo,   ...
	out_total, ...
	p_exit     ...
	] =    linprog(f,             A, b, Aeq, beq, lb, ub);
end

% Resultados --------------------------------------------------------------
if (p_exit < 1)
    out_ok    =  false;
    out_bases =  [];
    out_total =  0;
else
    out_ok    =  true;
    out_bases =  reshape(p_grupo(1:(db * p)), db, p);
    out_total = -out_total;
end
end
%**************************************************************************